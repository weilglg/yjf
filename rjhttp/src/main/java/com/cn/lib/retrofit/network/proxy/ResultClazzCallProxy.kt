package com.cn.lib.retrofit.network.proxyimport com.cn.lib.retrofit.network.callback.IResultTypeimport com.cn.lib.retrofit.network.entity.ApiResultEntityimport com.cn.lib.retrofit.network.util.Utilimport com.retrofit.network.util.TypesUtilimport java.lang.reflect.ParameterizedTypeimport java.lang.reflect.Type/** * Class回调代理，方便自行处理结果 */abstract class ResultClazzCallProxy<T : ApiResultEntity<R>, R>(private val type: Type) : IResultType<T> {    override fun getType(): Type {        var typeArguments: Type? = type        if (typeArguments == null) {            typeArguments = Any::class.java        }        var rawType = Util.findNeedType(javaClass)        if (rawType is ParameterizedType) {            rawType = rawType.rawType        }        return TypesUtil.newParameterizedTypeWithOwner(null,rawType, typeArguments)    }}