package com.cn.lib.retrofit.network.requestimport com.cn.lib.retrofit.network.callback.DownloadProgressCallBackimport com.cn.lib.retrofit.network.func.RetryExceptionFuncimport com.cn.lib.retrofit.network.subscriber.RxDownloadSubscriberimport com.cn.lib.retrofit.network.transformer.HandleErrorTransformerimport io.reactivex.Observableimport io.reactivex.disposables.Disposableimport io.reactivex.schedulers.Schedulersimport okhttp3.ResponseBodyclass DownloadRequest(url: String) : BaseRequest<DownloadRequest>(url) {    private var saveName: String? = null    private var savePath: String? = null    /**     * 下载文件名称<br></br>     * 默认名字是时间戳生成的<br></br>     */    fun saveName(saveName: String): DownloadRequest {        this.saveName = saveName        return this    }    /**     * 下载文件保存的路径<br></br>     * 默认在：/storage/emulated/0/Android/data/包名/files/1494647767055<br></br>     */    fun savePath(savePath: String): DownloadRequest {        this.savePath = savePath        return this    }    override fun generateRequest(): Observable<ResponseBody> {        return mApiManager.downloadFile(mUrl)    }    fun execute(tag: Any, callBack: DownloadProgressCallBack): Disposable {        return build().generateRequest().compose { upstream ->            if (isSyncRequest) {                upstream.subscribeOn(Schedulers.io())                        .unsubscribeOn(Schedulers.io())                        .observeOn(Schedulers.computation())            } else {                upstream            }        }.compose(HandleErrorTransformer())                .retryWhen(RetryExceptionFunc(mRetryCount, mRetryDelay.toLong(), mRetryIncreaseDelay.toLong()))                .subscribeWith(RxDownloadSubscriber<ResponseBody>(tag, mUrl, mContext, savePath, saveName, callBack))    }}